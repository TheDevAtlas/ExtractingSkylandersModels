# Skylanders Imaginators PAK extractor
# Original MUA2 script by aluigi (http://quickbms.aluigi.org), hackishly modified (sorry, aluigi) by Random Talking Bush

get FOLDERNAME basename

endian big
idstring "\x1aAGI"

get VER long
get UNKNOWN long
get FILES long
get ALIGN long
get UNKNOWN long
get UNKNOWN long
get UNKNOWN long
get SHORTBLOCKCOUNT long
get BYTEBLOCKCOUNT long
get NAMES_OFF long
get UNKNOWN long
get UNKNOWN long
get UNKNOWN long
for i = 0 < FILES
	get CRC long
next i
math QUICKBMS64 = 0x10000000
math QUICKBMS64 * 16

for i = 0 < FILES
	getbits OFFSET   32
	getbits OFFSET40 8
	getbits ID       24

	if QUICKBMS64 != 0
		math OFFSET40 << 40
		math OFFSET | OFFSET40
	endif

	get SIZE long
	get MODE long

	putarray 0 i OFFSET
	putarray 1 i SIZE
	putarray 2 i MODE
	putarray 3 i ID
next i

# here is where it starts the list of supposed chunks identifiers
savepos SHORTBLOCK_OFF
xmath BYTEBLOCK_OFF "SHORTBLOCK_OFF + ((SHORTBLOCKCOUNT * 2))"

goto NAMES_OFF
for i = 0 < FILES
	getarray OFFSET 0 i
	getarray SIZE   1 i
	getarray MODE   2 i
	getarray ID     3 i # 0xffffff if unset

	if NAMES_OFF == 0
		set NAME string ""
		savepos BACKUP_OFF
	else
		get NAME_OFF long
		if i == 0
			xmath TMP "FILES * 4"
			if NAME_OFF != TMP
				math CHANGE_ENDIAN = 1
			else
				math CHANGE_ENDIAN = 0
			endif
		endif
		if CHANGE_ENDIAN != 0
			reverselong NAME_OFF
		endif
		savepos BACKUP_OFF
		math NAME_OFF + NAMES_OFF
		goto NAME_OFF
		get EXTNAME string
		get NAME string
	endif

	if MODE == 0xffffffff
		set PATH FOLDERNAME
		string PATH + "/"
		string PATH + NAME
		log PATH OFFSET SIZE
	else

		if SIZE >= 0x00040000
			xmath CHUNKS_IDX_OFF "SHORTBLOCK_OFF + ((MODE & 0xffffff) * 2)"
		else
			xmath CHUNKS_IDX_OFF "BYTEBLOCK_OFF + (MODE & 0xffffff)"
		endif

		if MODE & 0x20000000
			comtype lzma_dynamic
		else
			comtype deflate_noerror
		endif

		math CHUNK_SIZE = 0x8000
		putvarchr MEMORY_FILE SIZE 0
		log MEMORY_FILE 0 0
		append 1		# necessary for adding zeroes
		for MYSIZE = 0 u< SIZE

		goto CHUNKS_IDX_OFF
		if SIZE >= 0x00040000
			get CHUNK_INFO short
		else
			get CHUNK_INFO byte
		endif
		savepos CHUNKS_IDX_OFF
			
		if SIZE >= 0x00040000
			if CHUNK_INFO & 0x8000
				xmath CHUNK_OFF "OFFSET + ((CHUNK_INFO & 0x7FFF) * ALIGN)"
				goto CHUNK_OFF
				endian save CURRENT_ENDIAN
				endian little
				get CHUNK_ZSIZE short
				savepos CHUNK_OFF
				endian set CURRENT_ENDIAN
				if CHUNK_ZSIZE > CHUNK_SIZE
					print "Error: something wrong with CHUNK_ZSIZE (%CHUNK_ZSIZE|x%) > CHUNK_SIZE (%CHUNK_SIZE|x%), I quit"
					cleanexit
				endif
				if MODE & 0x20000000
					math CHUNK_ZSIZE + 5		# necessary!
				endif
				clog MEMORY_FILE CHUNK_OFF CHUNK_ZSIZE CHUNK_SIZE
			else
				math CHUNK_ZSIZE = CHUNK_SIZE
				xmath CHUNK_OFF "OFFSET + ((CHUNK_INFO & 0x7FFF) * ALIGN)"
				log MEMORY_FILE CHUNK_OFF CHUNK_SIZE
			endif
		else
			if CHUNK_INFO & 0x80
				xmath CHUNK_OFF "OFFSET + ((CHUNK_INFO & 0x7F) * ALIGN)"
				goto CHUNK_OFF
				endian save CURRENT_ENDIAN
				endian little
				get CHUNK_ZSIZE short
				savepos CHUNK_OFF
				endian set CURRENT_ENDIAN
				if CHUNK_ZSIZE > CHUNK_SIZE
					print "Error: something wrong with CHUNK_ZSIZE (%CHUNK_ZSIZE|x%) > CHUNK_SIZE (%CHUNK_SIZE|x%), I quit"
					cleanexit
				endif
				if MODE & 0x20000000
					math CHUNK_ZSIZE + 5		# necessary!
				endif
				clog MEMORY_FILE CHUNK_OFF CHUNK_ZSIZE CHUNK_SIZE
			else
				math CHUNK_ZSIZE = CHUNK_SIZE
				xmath CHUNK_OFF "OFFSET + ((CHUNK_INFO & 0x7F) * ALIGN)"
				log MEMORY_FILE CHUNK_OFF CHUNK_SIZE
			endif
		endif
		math CHUNK_OFF + CHUNK_ZSIZE
		math CHUNK_OFF x ALIGN
		math MYSIZE + CHUNK_SIZE
		if MYSIZE > SIZE
			get MYSIZE asize MEMORY_FILE
		endif
		goto MYSIZE MEMORY_FILE
		next
		append
		set PATH FOLDERNAME
		string PATH + "/"
		string PATH + NAME
		log PATH 0 SIZE MEMORY_FILE
	endif

	goto BACKUP_OFF
next i
